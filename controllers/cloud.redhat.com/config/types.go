// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package config

// application deployment configuration for cloud.redhat.com applications
type AppConfig struct {
	// Database corresponds to the JSON schema field "database".
	Database *DatabaseConfig `json:"database,omitempty"`

	// Kafka corresponds to the JSON schema field "kafka".
	Kafka *KafkaConfig `json:"kafka,omitempty"`

	// Logging corresponds to the JSON schema field "logging".
	Logging *LoggingConfig `json:"logging,omitempty"`

	// MetricsPath corresponds to the JSON schema field "metricsPath".
	MetricsPath *string `json:"metricsPath,omitempty"`

	// MetricsPort corresponds to the JSON schema field "metricsPort".
	MetricsPort *float64 `json:"metricsPort,omitempty"`

	// ObjectStore corresponds to the JSON schema field "objectStore".
	ObjectStore *ObjectStoreConfig `json:"objectStore,omitempty"`

	// WebPort corresponds to the JSON schema field "webPort".
	WebPort *float64 `json:"webPort,omitempty"`
}

// broker configuration
type BrokerConfig struct {
	// Hostname corresponds to the JSON schema field "hostname".
	Hostname *string `json:"hostname,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *float64 `json:"port,omitempty"`
}

// Cloud Watch configuration
type CloudWatchConfig struct {
	// AccessKeyId corresponds to the JSON schema field "accessKeyId".
	AccessKeyId *string `json:"accessKeyId,omitempty"`

	// LogGroup corresponds to the JSON schema field "logGroup".
	LogGroup *string `json:"logGroup,omitempty"`

	// Region corresponds to the JSON schema field "region".
	Region *string `json:"region,omitempty"`

	// SecretAccessKey corresponds to the JSON schema field "secretAccessKey".
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`
}

// database configuration
type DatabaseConfig struct {
	// Hostname corresponds to the JSON schema field "hostname".
	Hostname *string `json:"hostname,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Pass corresponds to the JSON schema field "pass".
	Pass *string `json:"pass,omitempty"`

	// PgPass corresponds to the JSON schema field "pgPass".
	PgPass *string `json:"pgPass,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *float64 `json:"port,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

// kafka configuration
type KafkaConfig struct {
	// Brokers corresponds to the JSON schema field "brokers".
	Brokers []BrokerConfig `json:"brokers,omitempty"`

	// Topics corresponds to the JSON schema field "topics".
	Topics []TopicConfig `json:"topics,omitempty"`
}

// Logging Configuration
type LoggingConfig struct {
	// Cloudwatch corresponds to the JSON schema field "cloudwatch".
	Cloudwatch *CloudWatchConfig `json:"cloudwatch,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

// object storage configuration
type ObjectStoreConfig struct {
	// AccessKey corresponds to the JSON schema field "accessKey".
	AccessKey *string `json:"accessKey,omitempty"`

	// Endpoint corresponds to the JSON schema field "endpoint".
	Endpoint *string `json:"endpoint,omitempty"`

	// SecretKey corresponds to the JSON schema field "secretKey".
	SecretKey *string `json:"secretKey,omitempty"`
}

// topic configuration
type TopicConfig struct {
	// ConsumerGroup corresponds to the JSON schema field "consumerGroup".
	ConsumerGroup *string `json:"consumerGroup,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}
