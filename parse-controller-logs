#!/usr/bin/env python3

import json
import sys
import time

levels = {
    'dpanic': '\033[91m',
    'error': '\033[91m',
    'warning': '\033[93m',
    'diff': '\033[95m',
    'key': '\033[97m',
    'info': '\033[0m',
    'debug': '\033[0m',
}

cancel_colour = '\033[0m'

def col_wrap(stri, collev):
    return levels["key"] + stri + collev

filters = {sp[0]: sp[1] for sp in [arg.split(":", 1) for arg in sys.argv[1:]]}

def print_message(line):
    ts = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(int(line["ts"])))

    string = ""
    if 'level' in line:
        collev = levels.get(line['level'], levels["info"])
    elif line.get('diff') != None:
        collev = levels['diff']
    else:
        collev = cancel_colour

    string += collev

    app = "[%s]" % line["app"] if "app" in line else ""
    env = "[%s]" % line["env"] if "env" in line else ""

    string += f'[{ts}] {line["level"].upper()} {line.get("ctrl", "").upper()} {app or env} {line["msg"]} '
    rms = ["msg", "ts", "level", "ctrl", "logger"]
    for key in rms:
        if key in line:
            del(line[key])
    s_key = sorted(line.keys())
    string += " ".join([f"{col_wrap(f"{k}:", collev)}{line[k]}" for k in s_key])
    string += cancel_colour
    print(string)


for line in sys.stdin:
    try:
        js = json.loads(line)
    except:
        nline = line.strip("\n")
        string = levels['error']
        string += nline
        string += cancel_colour
        print(string)
        continue
    skip_flag = False
    for k, v in filters.items():
        if js.get(k) != v:
            skip_flag = True
    if not skip_flag:
        print_message(js)
    sys.stdout.flush()
